grammar

nat, i, j, n :: '' ::= {{ com natural numbers }}
  | 0 :: :: zero
  | S i :: :: succ
  | ( i ) :: :: Paren
  | | G | :: :: Length
  | (# i #) :: :: SecretParen
    {{ tex [[i]] }}

tm, a , b , c, t, p, A, B, C :: 'a_' ::= {{ com terms and types }}
  | i :: :: Var
  | Pi A B :: :: Pi
  | \ A a :: :: Abs
    {{ tex \lambda [[A]] \mathpunct{.} [[a]] }}
    {{ com function }}
  | a b :: :: App
    {{ tex [[a]] \; [[b]] }}
    {{ com function application }}
  | Set i :: :: Set {{ com sort }}
  | a { b } :: S :: Subst
  | a { b0 , b1 } :: S :: SubstTwo
  | ( A )   :: M :: Paren {{ coq ([[A]]) }}
  | (# a #) :: S :: SecretParen
    {{ tex [[a]] }}
    {{ com parsing precedence is hard }}
  | (@ a @) :: M :: TexParen
    {{ tex ([[a]]) }}
  | a ~ b : A :: :: CEq
    {{ tex [[a]] \sim [[b]] \in {[[A]]} }}
  | refl      :: :: Refl
  | Void      :: :: Void
  | J t a b p         :: :: Transp
  | Bool           :: :: Bool
    {{ tex \mathbb{B} }}
  | true :: :: True
  | false :: :: False
  | if a b0 b1 :: :: If
  | up n A :: :: Shift
    {{ tex \uparrow^{[[n]]} [[A]] }}
  | up1 A :: :: ShiftOne
    {{ tex \uparrow [[A]] }}
  | G i :: :: lookup
    {{ tex [[G]]_{[[i]]} }}

context, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com contexts }}
					  {{ coq list ( atom * (grade * tm) ) }}
   | empty           ::    :: Empty       {{ coq nil }}

   | A               ::    :: One
   | G ++ G'         :: M  :: Append      {{ tex [[G]], [[G']] }}

   | ( G )           :: M  :: Paren       {{ coq ([[G]]) }}
   | (# G #)           :: M  :: SecretParen {{ tex [[G]] }}

terminals :: 'terminals_' ::=
  | <->               ::   :: iso           {{ tex \leftrightarrow }}
  | <=>               ::   :: lrarrow       {{ tex \Leftrightarrow }}
  | -->               ::   :: step          {{ tex \longrightarrow }}
  | min               ::   :: min           {{ tex \mathsf{min} }}
  | ==                ::   :: definitional  {{ tex \equiv }}
  | all               ::   :: forall     {{ tex \forall }}
  | in                ::   :: in         {{ tex \ottkw{in} }}
  | let               ::   :: let        {{ tex \ottkw{let} }}
  | bind              ::   :: bind       {{ tex \ottkw{bind} }}
  | notin             ::   :: notin      {{ tex \not\in }}
  | <=                ::   :: check      {{ tex \leq }}
  | =>                ::   :: infer      {{ tex \Rightarrow }}
  | =>*               ::   :: minfer      {{ tex \Rightarrow^{\ast} }}
  | ->                ::   :: arrow      {{ tex \to }}
  | <-|               ::   :: mapsfrom   {{ tex \mapsfrom }}
  | []                ::   :: box        {{ tex \Box }}
  | |-                ::   :: entails    {{ tex \vdash }}
  | |-e               ::   :: entailsE   {{ tex \vdash }}
  | |-e               ::   :: entailsEE  {{ tex \vdash }}
  | |-$               ::   :: entailsC   {{ tex \vdash_{C} }}
  | -|                ::   :: produces   {{ tex \dashv }}
  | |=                ::   :: hs_entails {{ tex \vDash }}
  | |==               ::   :: hs_entaill {{ tex \vDash }}
  | /=                ::   :: neq        {{ tex \neq }}
  | |>                ::   :: cast       {{ tex \triangleright }}
  | ok                ::   :: ok         {{ tex \ \mathsf{ok} }}
  | _                 ::   :: blank      {{ tex \_ }}
  | ~>                ::   :: produce    {{ tex \leadsto }}
  | ~>*               ::   :: multistep  {{ tex \leadsto^{\ast} }}
  | ~>h               ::   :: steph      {{ tex \leadsto }}
  | empty             ::   :: empty      {{ tex \cdot }}
  | fv                ::   :: fv         {{ tex \mathsf{fv}\! }}
  | dom               ::   :: dom        {{ tex \mathsf{dom} }}
  | ~                 ::   :: twiddle    {{ tex \sim }}
  | ~~                ::   :: compatible {{ tex \asymp }}
  | '|'               ::   :: bar        {{ tex | }}
  | o                 ::   :: bullet     {{ tex \bullet }}
  | fst               ::   :: fst
  | snd               ::   :: snd
  | |=>|              ::   :: erasesto   {{ tex \mathrel{|\Rightarrow|} }}
  | |-=               ::   :: turneq     {{ tex \vdash_{=} }}
  | refl2             ::   :: refl2      {{ tex \mathbf{refl_2}  }}
  | ++                ::   :: concat     {{ tex \mathop{++} }}
  | *                 ::   :: times      {{ tex \cdot }}
  | Box               ::   :: Box        {{ tex \ottkw{Box} }}
  | =beta             ::   :: betaeq     {{ tex =_{\beta} }}
  | ;                 ::   :: semi       {{ tex \mathsf{;} }}
  | Pi                ::   :: Pi         {{ tex \Pi }}
  | inj               ::   :: inj        {{ tex \ottkw{inj} }}
  | case              ::   :: case       {{ tex \ottkw{case} }}
  | /\                ::   :: meet       {{ tex \wedge }}
  | \/                ::   :: join       {{ tex \vee }}
  | |->               ::   :: ctyp       {{ tex \Vdash }}
  | implies           ::   :: implies    {{ tex \ottkw{implies} }}
  | transp            ::   :: transp     {{ tex \ottkw{transp} }}

formula :: 'formula_' ::=
  | i < j                     ::   :: lt
  | judgement                 ::   :: judgement
  | x : psi in P              ::   :: inP
    {{ coq binds [[x]] [[psi]] [[P]] }}
  | x : psi A in W            ::   :: inW
    {{ tex [[x]]\! :^{[[psi]]}\![[A]] \in [[ W ]] }}
    {{ coq binds [[x]] ([[psi]], [[A]]) [[W]] }}
  | x in fv a                 ::   :: used
    {{ coq [[x]] `in` fv_tm_tm_tm [[a]] }}
    {{ tex [[x]]\ [[in]]\ [[fv]]\ [[a]] }}
  | x notin fv a              ::   :: fresh
    {{ coq [[x]] `notin` fv_tm_tm_tm [[a]] }}
  | x notin dom W             ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[W]]) }}
  | x notin dom D             ::   :: notInDx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[D]]) }}
  | x notin dom P             ::   :: notInPx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[P]]) }}
  | x notin dom H             ::   :: notInHX
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[H]]) }}
    {{ tex [[ x ]] \notin [[ dom ]] \: [[ H ]] }}
  | a = b                     ::   :: equal
    {{ coq [[a]]=[[b]] }}
  | a = psi b                 ::   :: equalQ
    {{ tex [[ a ]] =_{[[ psi ]]} [[ b ]] }}
  | W1 = W2                   ::   :: equalctx
    {{ coq ([[W1]] = [[W2]]) }}
  | D1 = D2                   ::   :: equalD
    {{ coq ([[D1]] = [[D2]]) }}
  | not ( psi1 <= psi2 )      ::   :: notsubrho
    {{ coq not ([[psi1]] <= [[psi2]]) }}
    {{ tex [[psi1]] \nleq [[psi2]] }}
  | psi1 <= psi2              ::   :: subrho
    {{ coq ([[psi1]] <= [[psi2]]) }}
  | psi1 < psi2               ::   :: ltrho
    {{ coq ([[psi1]] < [[psi2]]) }}
  | psi1 = psi2               ::   :: eqrho
    {{ coq ([[psi1]] = [[psi2]]) }}
  | True                      ::   :: True
    {{ coq True }}
  | False                     ::   :: False
    {{ coq False }}
  % | not formula               ::   :: not
  %   {{ coq not ([[formula]]) }}
  %   {{ tex \neg [[formula]] }}
  | formula1 /\ formula2      ::   :: and
    {{ coq [[formula1]] /\ [[formula2]] }}
  | formula1 \/ formula2      ::   :: or
    {{ coq [[formula1]] \/ [[formula2]] }}
  | formula1 implies formula2 ::   :: implies
    {{ coq [[formula1]] -> [[formula2]] }}
    {{ tex [[formula1]]\ [[implies]]\ [[formula2]] }}
  | formula1 iff formula2     ::   :: iff
    {{ coq [[formula1]] <-> [[formula2]] }}
  | ( formula )               ::   :: Paren
    {{ coq ([[formula]]) }}
  | uniq W                    ::   :: uniqW
    {{ coq uniq [[W]] }} {{ tex }}
  | uniq P                    ::   :: uniqP
    {{ coq uniq [[P]] }} {{ tex }}
  | [ formula ]               ::   :: Suppress
    {{ tex \suppress{[[formula]]} }}
    {{ coq [[formula]] }}
  | nolc A                    :: M :: nolcA
    {{ tex }}
    {{ coq DELETEME }}
  | nolc C                    :: M :: nolcC
    {{ tex }}
    {{ coq DELETEME }}
  | hackBinder A              :: M :: hackBinderA
    {{ tex }}
    {{ coq DELETEME }}
  | ctx D W                   :: M :: ctx
    {{ coq ctx [[D]][[W]] }}
    {{ tex [[D]]\vdash[[W]] }}
  | |- a ~>* b                ::   :: multistep
  | W |- a : A                ::   :: Typ
    {{ tex [[W]] \vdash[[a]]:[[A]] }}
  | axiom s1 s2               ::   :: axiom
    {{ coq axiom [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{A}  }}
  | rule_pi s1 s2 s3          ::   :: rule_pi
    {{ coq rule_pi [[s1]] [[s2]] [[s3]] }}
    {{ tex ([[s1]], [[s2]], [[s3]]) \in \mathcal{R}_{\Pi} }}
  | rule_sig s1 s2 s3         ::   :: rule_sig
    {{ coq rule_sig [[s1]] [[s2]] [[s3]] }}
    {{ tex ([[s1]], [[s2]], [[s3]]) \in \mathcal{R}_{\Sigma} }}
  | rule_eq s1 s2             ::   :: rule_eq
    {{ coq rule_eq [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{R}_{\sim} }}
  | rule_t s1 s2              ::   :: rule_t
    {{ coq rule_t [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{R}_{T} }}
  | rule_unit s              ::   :: rule_unit
    {{ coq rule_unit [[s]] }}
    {{ tex [[s]]  \in \mathcal{R}_{U} }}
  | rule_bool s              ::   :: rule_bool
    {{ coq rule_bool [[s]] }}
    {{ tex [[s]]  \in \mathcal{R}_{B} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%Dependent Types

defns
   JPar :: '' ::=

defn
 a => b :: :: Par :: 'P_' {{ com Parallel Reduction }}
 {{ tex [[ a ]] \Rightarrow [[ b ]]  }}
by

----------- :: Var
i => i

---------------- :: Set
Set i => Set i

-------------- :: Void
Void => Void

A0 => A1
B0 => B1
----------------------- :: Pi
Pi A0 B0 => Pi A1 B1

A0 => A1
a0 => a1
----------------------- :: Abs
\ A0 a0 => \ A1 a1

a0 => a1
b0 => b1
----------------------- :: App
a0 b0 => a1 b1

a => \ A a0
b0 => b1
----------------------- :: AppAbs
a b0 => a0 { b1 }

-------------- :: True
true => true

--------------- :: False
false => false

a0 => a1
b0 => b1
c0 => c1
--------------------------- :: If
if a0 b0 c0 => if a1 b1 c1

a0 => true
b0 => b1
c0 => c1
--------------------------- :: IfTrue
if a0 b0 c0 => b1

a0 => false
b0 => b1
c0 => c1
--------------------------- :: IfFalse
if a0 b0 c0 => c1

-------------- :: Bool
Bool => Bool





defns
JJoin :: '' ::=

defn
a <=> b :: :: Coherent :: ''
{{ tex [[a]] \Leftrightarrow [[b]] }}
by

defns
JTyping :: '' ::=

defn
|- G ::     :: Ctx :: 'Ctx_'
{{ tex \vdash [[G]] }}
by

------------- :: Empty
|- empty


|- G
G |- A : Set i
------------------------- :: Cons
|- G ++ A

defn
  G |- a : A ::  :: Typing :: 'T_' {{ com Typing }}
{{ tex [[G]] \vdash [[a]]: [[A]] }}
 by

|- G
i < j
-------------------------- :: Set
G |-  Set i : Set j

|- G
i < | G |
--------------------------------------------- :: Var
G |- i : up S i G i

%% functions

G |- A : Set i
G ++ A |- B : Set i
--------------------------------------- :: Pi
G |- Pi A B : Set i

G ++ A |- b : B
G |- Pi A B : Set i
----------------------------------------------- :: Abs
G |- \ A b : Pi A B

G |- b : Pi A B
G |- a : A
------------------------------------------- :: App
G |- b a : B { a }

G |- a : A
G |- B : Set i
A <=> B
------------------------------- :: Conv
G |- a : B

|- G
G |- a : A
-------------------------------- :: Refl
G |- refl : a ~ a : A

G |- a : A
G |- b : A
G |- A : Set j
-------------------------------- :: CEq
G |- a ~ b : A : Set i

G |- a : A
G |- b : A
G |- A : Set j
G |- p : a ~ b : A
(# G ++ A #) ++ 0 ~ up1 a : up1 A |- C : Set i
G |- t : C { a ,  refl }
------------------------------------ :: J
G |- J t a b p : C { b , p }

|- G
-------------------------- :: Bool
G |- Bool : Set i

|- G
----------------------------- :: True
G |- true : Bool

|- G
----------------------------- :: False
G |- false : Bool

G |- a : Bool
G |- b0 : A
G |- b1 : A
----------------------------- :: If
G |- if a b0 b1 : A

|- G
----------------------------- :: Void
G |- Void : Set i
