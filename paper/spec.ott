grammar

nat, i, j, n :: '' ::= {{ com natural numbers }}
  | S i :: :: succ
  | ( i ) :: :: Paren
  | | G | :: :: Length

tm, a , b , t, p, A :: 'a_' ::= {{ com terms and types }}
  | i :: :: Var
  | Pi A B :: :: Pi
  | \ A . a :: :: Abs
    {{ tex \lambda [[A]] \mathpunct{.} [[a]] }}
    {{ com function }}
  | a b :: :: App
    {{ tex [[a]] \; [[b]] }}
    {{ com function application }}
  | Set i :: :: Set {{ com sort }}
  | a { b } :: S :: Subst
  | ( A )   :: M :: Paren {{ coq ([[A]]) }}
  | (# a #) :: S :: SecretParen
    {{ tex [[a]] }}
    {{ com parsing precedence is hard }}
  | (@ a @) :: M :: TexParen
    {{ tex ([[a]]) }}
  | a ~ b : A :: :: CEq
    {{ tex [[a]] \sim [[b]] \in {[[A]]} }}
  | refl               :: :: Refl
  | J t a b p         :: :: Transp
  | Bool           :: :: Bool
    {{ tex \mathbb{B} }}
  | true :: :: True
  | false :: :: False
  | if a b0 b1 :: :: If
  | up n A :: :: Shift
    {{ tex \uparrow^{[[n]]} [[A]] }}
  | G i :: :: lookup
    {{ tex [[G]]_{[[i]]} }}

context, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com contexts }}
					  {{ coq list ( atom * (grade * tm) ) }}
   | empty           ::    :: Empty       {{ coq nil }}

   | A               ::    :: One
   | G ++ G'         :: M  :: Append      {{ tex [[G]], [[G']] }}

   | ( G )           :: M  :: Paren       {{ coq ([[G]]) }}

terminals :: 'terminals_' ::=
  | <->               ::   :: iso           {{ tex \leftrightarrow }}
  | <=>               ::   :: lrarrow       {{ tex \Leftrightarrow }}
  | -->               ::   :: step          {{ tex \longrightarrow }}
  | min               ::   :: min           {{ tex \mathsf{min} }}
  | ==                ::   :: definitional  {{ tex \equiv }}
  | all               ::   :: forall     {{ tex \forall }}
  | in                ::   :: in         {{ tex \ottkw{in} }}
  | let               ::   :: let        {{ tex \ottkw{let} }}
  | bind              ::   :: bind       {{ tex \ottkw{bind} }}
  | notin             ::   :: notin      {{ tex \not\in }}
  | <=                ::   :: check      {{ tex \leq }}
  | =>                ::   :: infer      {{ tex \Rightarrow }}
  | =>*               ::   :: minfer      {{ tex \Rightarrow^{\ast} }}
  | ->                ::   :: arrow      {{ tex \to }}
  | <-|               ::   :: mapsfrom   {{ tex \mapsfrom }}
  | []                ::   :: box        {{ tex \Box }}
  | |-                ::   :: entails    {{ tex \vdash }}
  | |-e               ::   :: entailsE   {{ tex \vdash }}
  | |-e               ::   :: entailsEE  {{ tex \vdash }}
  | |-$               ::   :: entailsC   {{ tex \vdash_{C} }}
  | -|                ::   :: produces   {{ tex \dashv }}
  | |=                ::   :: hs_entails {{ tex \vDash }}
  | |==               ::   :: hs_entaill {{ tex \vDash }}
  | /=                ::   :: neq        {{ tex \neq }}
  | |>                ::   :: cast       {{ tex \triangleright }}
  | ok                ::   :: ok         {{ tex \ \mathsf{ok} }}
  | _                 ::   :: blank      {{ tex \_ }}
  | ~>                ::   :: produce    {{ tex \leadsto }}
  | ~>*               ::   :: multistep  {{ tex \leadsto^{\ast} }}
  | ~>h               ::   :: steph      {{ tex \leadsto }}
  | empty             ::   :: empty      {{ tex \cdot }}
  | fv                ::   :: fv         {{ tex \mathsf{fv}\! }}
  | dom               ::   :: dom        {{ tex \mathsf{dom} }}
  | ~                 ::   :: twiddle    {{ tex \sim }}
  | ~~                ::   :: compatible {{ tex \asymp }}
  | '|'               ::   :: bar        {{ tex | }}
  | o                 ::   :: bullet     {{ tex \bullet }}
  | fst               ::   :: fst
  | snd               ::   :: snd
  | |=>|              ::   :: erasesto   {{ tex \mathrel{|\Rightarrow|} }}
  | |-=               ::   :: turneq     {{ tex \vdash_{=} }}
  | refl2             ::   :: refl2      {{ tex \mathbf{refl_2}  }}
  | ++                ::   :: concat     {{ tex \mathop{++} }}
  | *                 ::   :: times      {{ tex \cdot }}
  | Box               ::   :: Box        {{ tex \ottkw{Box} }}
  | =beta             ::   :: betaeq     {{ tex =_{\beta} }}
  | ;                 ::   :: semi       {{ tex \mathsf{;} }}
  | Pi                ::   :: Pi         {{ tex \Pi }}
  | inj               ::   :: inj        {{ tex \ottkw{inj} }}
  | case              ::   :: case       {{ tex \ottkw{case} }}
  | /\                ::   :: meet       {{ tex \wedge }}
  | \/                ::   :: join       {{ tex \vee }}
  | |->               ::   :: ctyp       {{ tex \Vdash }}
  | implies           ::   :: implies    {{ tex \ottkw{implies} }}
  | transp            ::   :: transp     {{ tex \ottkw{transp} }}

formula :: 'formula_' ::=
  | i < j                     ::   :: lt
  | judgement                 ::   :: judgement
  | x : psi in P              ::   :: inP
    {{ coq binds [[x]] [[psi]] [[P]] }}
  | x : psi A in W            ::   :: inW
    {{ tex [[x]]\! :^{[[psi]]}\![[A]] \in [[ W ]] }}
    {{ coq binds [[x]] ([[psi]], [[A]]) [[W]] }}
  | x in fv a                 ::   :: used
    {{ coq [[x]] `in` fv_tm_tm_tm [[a]] }}
    {{ tex [[x]]\ [[in]]\ [[fv]]\ [[a]] }}
  | x notin fv a              ::   :: fresh
    {{ coq [[x]] `notin` fv_tm_tm_tm [[a]] }}
  | x notin dom W             ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[W]]) }}
  | x notin dom D             ::   :: notInDx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[D]]) }}
  | x notin dom P             ::   :: notInPx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[P]]) }}
  | x notin dom H             ::   :: notInHX
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[H]]) }}
    {{ tex [[ x ]] \notin [[ dom ]] \: [[ H ]] }}
  | a = b                     ::   :: equal
    {{ coq [[a]]=[[b]] }}
  | a = psi b                 ::   :: equalQ
    {{ tex [[ a ]] =_{[[ psi ]]} [[ b ]] }}
  | W1 = W2                   ::   :: equalctx
    {{ coq ([[W1]] = [[W2]]) }}
  | D1 = D2                   ::   :: equalD
    {{ coq ([[D1]] = [[D2]]) }}
  | not ( psi1 <= psi2 )      ::   :: notsubrho
    {{ coq not ([[psi1]] <= [[psi2]]) }}
    {{ tex [[psi1]] \nleq [[psi2]] }}
  | psi1 <= psi2              ::   :: subrho
    {{ coq ([[psi1]] <= [[psi2]]) }}
  | psi1 < psi2               ::   :: ltrho
    {{ coq ([[psi1]] < [[psi2]]) }}
  | psi1 = psi2               ::   :: eqrho
    {{ coq ([[psi1]] = [[psi2]]) }}
  | True                      ::   :: True
    {{ coq True }}
  | False                     ::   :: False
    {{ coq False }}
  % | not formula               ::   :: not
  %   {{ coq not ([[formula]]) }}
  %   {{ tex \neg [[formula]] }}
  | formula1 /\ formula2      ::   :: and
    {{ coq [[formula1]] /\ [[formula2]] }}
  | formula1 \/ formula2      ::   :: or
    {{ coq [[formula1]] \/ [[formula2]] }}
  | formula1 implies formula2 ::   :: implies
    {{ coq [[formula1]] -> [[formula2]] }}
    {{ tex [[formula1]]\ [[implies]]\ [[formula2]] }}
  | formula1 iff formula2     ::   :: iff
    {{ coq [[formula1]] <-> [[formula2]] }}
  | ( formula )               ::   :: Paren
    {{ coq ([[formula]]) }}
  | uniq W                    ::   :: uniqW
    {{ coq uniq [[W]] }} {{ tex }}
  | uniq P                    ::   :: uniqP
    {{ coq uniq [[P]] }} {{ tex }}
  | [ formula ]               ::   :: Suppress
    {{ tex \suppress{[[formula]]} }}
    {{ coq [[formula]] }}
  | nolc A                    :: M :: nolcA
    {{ tex }}
    {{ coq DELETEME }}
  | nolc C                    :: M :: nolcC
    {{ tex }}
    {{ coq DELETEME }}
  | hackBinder A              :: M :: hackBinderA
    {{ tex }}
    {{ coq DELETEME }}
  | ctx D W                   :: M :: ctx
    {{ coq ctx [[D]][[W]] }}
    {{ tex [[D]]\vdash[[W]] }}
  | |- a ~>* b                ::   :: multistep
  | W |- a : A                ::   :: Typ
    {{ tex [[W]] \vdash[[a]]:[[A]] }}
  | axiom s1 s2               ::   :: axiom
    {{ coq axiom [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{A}  }}
  | rule_pi s1 s2 s3          ::   :: rule_pi
    {{ coq rule_pi [[s1]] [[s2]] [[s3]] }}
    {{ tex ([[s1]], [[s2]], [[s3]]) \in \mathcal{R}_{\Pi} }}
  | rule_sig s1 s2 s3         ::   :: rule_sig
    {{ coq rule_sig [[s1]] [[s2]] [[s3]] }}
    {{ tex ([[s1]], [[s2]], [[s3]]) \in \mathcal{R}_{\Sigma} }}
  | rule_eq s1 s2             ::   :: rule_eq
    {{ coq rule_eq [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{R}_{\sim} }}
  | rule_t s1 s2              ::   :: rule_t
    {{ coq rule_t [[s1]] [[s2]] }}
    {{ tex ([[s1]], [[s2]]) \in \mathcal{R}_{T} }}
  | rule_unit s              ::   :: rule_unit
    {{ coq rule_unit [[s]] }}
    {{ tex [[s]]  \in \mathcal{R}_{U} }}
  | rule_bool s              ::   :: rule_bool
    {{ coq rule_bool [[s]] }}
    {{ tex [[s]]  \in \mathcal{R}_{B} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%Dependent Types

defns
JTyping :: '' ::=

defn
|- G ::     :: Ctx :: 'Ctx_'
{{ tex \vdash [[G]] }}
by

------------- :: Empty
|- empty


|- G
G |- A : Set i
------------------------- :: Cons
|- G ++ A

defn
  G |- a : A ::  :: Typing :: 'T_' {{ com Typing }}
{{ tex [[G]] \vdash [[a]]: [[A]] }}
 by

|- G
i < j
-------------------------- :: Type
G |-  Set i : Set j

|- G
i < | G |
--------------------------------------------- :: Var
G |- i : up S i G i

%% functions

W |- psi A : type s1
W ++ x : psi0 A |- psi B : type s2
rule_pi s1 s2 s3
--------------------------------------- :: Pi
W |- psi Pi x :psi0 A. B : type s3

W ++ x : psi0 A |- psi b : B
W |- psi1 (Pi x:psi0 A. B) : type s
----------------------------------------------- :: Abs
W |- psi \ psi0 x : A . b : Pi x :psi0 A . B

W |- psi b : Pi x :psi0 A . B
W |- psi0 a : A
------------------------------------------- :: App
W |- psi b psi0 a : B {a/x}

W |- psi a : A
W |- psi0 B : type s
|W| |- A == B
------------------------------- :: Conv
W |- psi a : B

W |- psi2 (@ psi0 a ~ a : psi1 A @) : type s
-------------------------------- :: Refl
W |- psi refl : (@ psi0 a ~ a : psi1 A @)

W |- psi1 a : A
W |- psi1 b : A
W |- psi2 A : type s1
rule_eq s1 s2
psi1 <= psi0
psi0 <= psi
-------------------------------- :: CEq
W |- psi (@ psi0 a ~ b : psi1 A @) : type s2

hackBinder (Pi x : psi0 A . B)
W ++ x : psi1 A |- psi0 B : type s
W |- psi a : (@ psi0 a0 ~ a1 : psi1 A @)
W |- psi b : B { a0 / x  }
[ W |- psi2 A : type s1 ]
------------------------------------ :: Transp
W |- psi transp a b : B { a1 / x }


W |- psi A : type s1
rule_t s1 s2
------------------------------------ :: T
W |- psi T psi0 A : type s2


W |- psi0 a : A
W |- psi1 T psi0 A : type s
------------------------------------ :: Box
W |- psi box psi0 a : T psi0 A


W |- psi a : T psi0 A
psi0 <= psi
------------------------------------ :: Unbox
W |- psi unbox psi0 a : A

W |- psi A : type s1
W ++ x : psi0 A |- psi B : type s2
rule_sig s1 s2 s3
---------------------------------------- :: SSigma
W |- psi x :psi0 A && B : type s3

W |- psi1 x:psi0 A && B : type s
W |- psi0 a : A
W |- psi b : B {a/x}
------------------------------------------ :: SPair
W |- psi (a psi0 & b) : x :psi0 A && B

W |- psi a : x :psi0 A && B
psi0 <= psi
----------------------------------- :: Proj1
W |- psi fst psi0 a : A

W |- psi a : x :psi0 A && B
W |- psi0 fst psi0 a : A
----------------------------------- :: Proj2
W |- psi snd psi0 a : B {fst psi0 a / x}

|- W
rule_unit s
-------------------------- :: TyUnit
W |- psi Unit : type s

W |- psi0 Unit : type s
-------------------------- :: TmUnit
W |- psi unit : Unit


|- W
rule_bool s
-------------------------- :: Bool
W |- psi Bool : type s


W |- psi0 Bool : type s
----------------------------- :: True
W |- psi true : Bool

W |- psi0 Bool : type s
----------------------------- :: False
W |- psi false : Bool

W |- psi a : Bool
W |- psi b0 : A
W |- psi b1 : A
----------------------------- :: If
W |- psi if a b0 b1 : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
   JRed :: '' ::=
defn
  a ~> b :: :: Red :: 'R_' {{ com Reduction }}
by

a0 ~> a1
---------------------- :: App
a0 psi0 b ~> a1 psi0 b

-------------------------------------- :: AppAbs
( \ psi0 x : A . a ) psi0 b ~> a {b / x}

a ~> a0
----------------------- :: Transp
transp a b ~> transp a0 b

----------------------- :: TranspRefl
transp refl a ~> a

a ~> a0
----------------------- :: Unbox
unbox psi0 a ~> unbox psi0 a0

------------------------------- :: UnboxBox
unbox psi0 (box psi0 a) ~> a

a ~> a'
--------------------------------------------------------- :: Proj1Cong
fst psi a ~> fst psi a'


a ~> a'
--------------------------------------------------------- :: Proj2Cong
snd psi a ~> snd psi a'


--------------------------------------------------------- :: Proj1Beta
fst psi (a1 psi & a2) ~> a1

--------------------------------------------------------- :: Proj2Beta
snd psi (a1 psi & a2) ~> a2


a ~> a'
------------------------------- :: If
if a b0 b1 ~> if a' b0 b1


----------------------- :: IfTrue
if true b0 b1 ~> b0

----------------------- :: IfFalse
if false b0 b1 ~> b1


defns
   JReds :: '' ::=
defn
  a ~>* b :: :: Reds :: 'Rs_' {{ com Transitive and reflexive closure of reduction }}
by

------------------------ :: Refl
a ~>* a

a0 ~> b
b ~>* a1
------------------------ :: Step
a0 ~>* a1


defns
   JPar :: '' ::=

defn
P |- psi psi0 a => b ::  :: CPar :: 'CPar_' {{ com Parallel reduction at [[psi]] is guarded by [[psi0]] }}
 {{ tex [[ P ]] \vdash^{[[psi]]}_{[[psi0]]} [[ a ]] [[=>]] [[ b ]]  }}

by

psi0 <= psi
P |- psi a1 => a2
-------------------------------- :: Leq
P |- psi psi0 a1 => a2

not (psi0 <= psi)
uniq P
-------------------------------- :: Nleq
P |- psi psi0 a1 => a2


defn
 P |- psi  a => b :: :: Par :: 'Par_' {{ com Parallel Reduction }}
 {{ tex [[P]] [[|-]]  [[ a ]] \Rightarrow_{[[ psi ]]} [[ b ]]  }}
by

uniq P
psi0 <= psi
x : psi0 in P
-------------------- :: Var
P |- psi x => x

uniq P
-------------------------------- :: Type
P |- psi type s => type s


P |- psi  A1 => A2
P ++ x : psi1 |- psi  B1 => B2
---------------------------------------------- :: Pi
P |- psi  Pi x :psi1 A1. B1 => Pi x :psi1 A2. B2

P |- psi  a => (\ psi0 x : A. a')
P |- psi psi0 b => b'
----------------------------- :: AppBeta
P |- psi  a psi0 b => a' { b' / x }

P |- psi a => a'
P |- psi psi0 b => b'
----------------------------- :: App
P |- psi  a psi0 b => a' psi0  b'

P ++ x: psi0 |- psi  b1 => b2
% P |- psi  A1 => A2
------------------------------------- :: Abs
P |- psi  \ psi0 x : A1 . b1 => \ psi0 x : A2 . b2

uniq P
-------------------------------- :: Refl
P |- psi refl => refl

% Does J need a label for x?
P |- psi a0 => a1
P |- psi b0 => b1
-------------------------------- :: Transp
P |- psi transp a0 b0 => transp a1 b1

P |- psi a0 => a1
P |- psi b0 => b1
psi0 <= psi
-------------------------------- :: CEq
P |- psi psi0 a0 ~ b0 : psi1 A0 => psi0 a1 ~ b1 : psi1 A1

P |- psi a0 => refl
P |- psi b0 => b1
------------------------------------------ :: TranspRefl
P |- psi transp a0 b0  => b1

P |- psi A => B
------------------------------------------- :: T
P |- psi T psi0 A => T psi0 B

P |- psi psi0 a => b
-------------------------------------- :: Box
P |- psi box psi0 a => box psi0 b

P |- psi a => b
psi0 <= psi
-------------------------------------- :: Unbox
P |- psi unbox psi0 a => unbox psi0 b

P |- psi a => box psi0 b
psi0 <= psi
------------------------------------- :: UnboxBox
P |- psi unbox psi0 a => b


P |- psi a0 => a1
psi0 <= psi
--------------------------------------------------------- :: Proj1Cong
P |- psi fst psi0 a0 => fst psi0 a1

P |- psi a0 => a1
--------------------------------------------------------- :: Proj2Cong
P |- psi snd psi0 a0 => snd psi0 a1

P |- psi b => (a1 psi0 & a2)
psi0 <= psi
--------------------------------------------------------- :: Proj1Beta
P |- psi fst psi0 b => a1

P |- psi b => (a1 psi0 & a2)
--------------------------------------------------------- :: Proj2Beta
P |- psi snd psi0 b => a2

P |- psi psi0 a0 => a1
P |- psi b0 => b1
--------------------------------------------------------- :: SPair
P |- psi (a0 psi0 & b0) => (a1 psi0 & b1)

P |- psi A0 => A1
P ++ x : psi0 |- psi B0 => B1
--------------------------------------- :: SSigma
P |- psi x :psi0 A0 && B0 => x :psi0 A1 && B1

uniq P
-------------------------------- :: TyUnit
P |- psi Unit => Unit

uniq P
-------------------------------- :: TmUnit
P |- psi unit => unit


uniq P
----------------------------- :: Bool
P |- psi Bool => Bool


uniq P
----------------------------- :: True
P |- psi true => true

uniq P
----------------------------- :: False
P |- psi false => false

P |- psi a0 => a1
P |- psi b0 => b2
P |- psi b1 => b3
----------------------------- :: If
P |- psi if a0 b0 b1 => if a1 b2 b3

P |- psi a0 => true
P |- psi b0 => b2
P |- psi b1 => b3
----------------------------- :: IfTrue
P |- psi if a0 b0 b1 => b2

P |- psi a0 => false
P |- psi b0 => b2
P |- psi b1 => b3
----------------------------- :: IfFalse
P |- psi if a0 b0 b1 => b3


defns
   JEPar :: '' ::=
defn
P |- a => b :: :: EPar :: 'EP_'
by

P |- psi a => b
------------------------- :: One
P |- a => b


defns
   JEMultiPar :: '' ::=
defn
P |- a =>* b :: :: EMPar :: 'EMP_' by

P |- a => b
------------------------- :: One
P |- a =>* b

P |- a => b
P |- b =>*  a'
------------------------- :: Step
P |- a =>* a'


defns
   JEJoins :: '' ::=
defn
P |- a <=> b :: :: EJoins :: 'EJ_' by

P |- a1 =>* b
P |- a2 =>* b
------------------------- :: ejoins
P |- a1 <=> a2

defns
   JMultiPar :: '' ::=
defn
P |- psi  a =>* b  ::   :: MultiPar :: 'MP_'
{{ tex [[P]] [[|-]] [[a]] [[=>*]]_{[[psi]]} [[b]] }}
{{ com multistep parallel reduction }}
by

P |- psi a => b
------------------------- :: One
P |- psi a =>* b

P |- psi  a =>  b
P |- psi  b =>*  a'
-------------------------- :: Step
P |- psi  a =>*  a'

defns
   JJoins :: '' ::=
defn
P |- psi  a <=> b  ::   :: Joins :: ''
{{ tex [[P]][[|-]] [[a]] [[<=>]]_{[[psi]]}  [[b]] }}
{{ com parallel reduction to a common term }}
by

P |- psi  a1 =>* b
P |- psi  a2 =>* b
-------------------------- :: join
P |- psi  a1 <=> a2

defns
  JCMultiPar :: '' ::=
defn
P |- psi psi0 a =>* b ::   :: CMultiPar :: 'CMP_'
{{ tex [[P]] [[|-]]_{[[psi]]}^{[[psi0]]} [[a]] [[=>*]] [[b]] }}
{{ com }}

by

psi0 <= psi
P |- psi a1 =>* a2
-------------------------------- :: Leq
P |- psi psi0 a1 =>* a2

not (psi0 <= psi)
uniq P
-------------------------------- :: Nleq
P |- psi psi0 a1 =>* a2


defns
  JCJoins :: '' ::=
defn
P |- psi psi0 a <=> b ::   :: CJoins :: 'CJ_'
{{ tex [[P]] [[|-]]^{[[psi]]}_{[[psi0]]} [[a]] [[<=>]] [[b]] }}
{{ com }}

by

psi0 <= psi
P |- psi a1 <=> a2
-------------------------------- :: Leq
P |- psi psi0 a1 <=> a2

not (psi0 <= psi)
uniq P
-------------------------------- :: Nleq
P |- psi psi0 a1 <=> a2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
