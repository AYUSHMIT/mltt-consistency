grammar

var, x, y :: '' ::= {{ com variables }}

nat, i, j, n :: '' ::= {{ com natural numbers }}
  | 0 :: :: zero
  | 1 :: :: numone
  | Suc i :: :: succ {{ tex 1 + [[i]] }}
  | ( i ) :: S :: Paren
  | | G | :: S :: Length
  | (# i #) :: S :: SecretParen
    {{ tex [[i]] }}
  | ren xi i :: S :: renapp {{ tex [[xi]]([[i]]) }}


set, R , S, F, I :: '' ::= {{ com sets }}
  | emptyset :: :: empty
    {{ tex \emptyset }}
  | { a | formula } :: :: comprehension
    {{ tex \{ [[a]] \mid [[formula]]  \} }}
  | dom S :: :: domain
    {{ tex [[dom]]([[S]]) }}
  | F a   :: :: App
    {{ tex [[F]]([[a]]) }}
  | STm   :: :: SetOfTerms
    {{ tex \textit{Term} }}
  | PowerSet S :: :: PowerSet
    {{ tex \mathcal{P}([[S]]) }}
  | S1 -> S2 :: :: FunSet
    {{ tex [[S1]] \rightarrow [[S2]] }}
  | (# S #) :: :: HParen
    {{ tex [[S]] }}
  | { i | formula  } :: :: comprehensionNat
    {{ tex \{ [[i]] \mid [[formula]]  \} }}
  | SNat :: :: SetofNats
    {{ tex \mathbb{N} }}
  | S0 * S1 :: :: CartesianProd
    {{ tex [[S0]] \times [[S1]] }}
  | S n     :: :: AppInt
    {{ tex [[S]]([[n]]) }}

rho {{ tex \rho }}, xi {{tex \xi}} :: '' ::= {{ com substitutions }}
  | ( rho )      :: :: Parens
  | emptyS     :: :: emptyS
  | id        :: :: id
  | rho .: A  :: :: cons
    {{ tex [[rho]]:[[A]] }}
  | xi .: i  :: :: consInt
    {{ tex [[xi]]:[[i]] }}
  | up rho    :: :: up
    {{ tex \Uparrow [[rho]]}}
  | [ A ]         :: :: one
  | idtm          :: :: idtm
    {{ tex \ottkw{id}_{tm} }}
  | up n      :: :: upn
    {{ tex \uparrow^{[[n]]} }}

tm, a , b , c, t, p, A, B, C, e,f :: 'a_' ::= {{ com terms and types }}
  | arg :: :: Hole
    {{ tex - }}
  | var i :: :: Var
    {{ com variable }}
    {{ tex \ottkw{v}_{[[i]]} }}
  | Pi A B :: :: Pi
    {{ com dependent function type }}
  | \ A a :: :: Abs
    {{ tex \lambda [[A]] \mathpunct{.} [[a]] }}
    {{ com function }}
  | \\ a   :: :: UAbs
    {{ tex \lambda [[a]] }}
  | a b :: :: App
    {{ tex [[a]] \; [[b]] }}
    {{ com function application }}
  | Set i :: :: Set
    {{ com universe }}
  | a { A } :: S :: Subst {{ tex [[a]] [ [[A]]  ] }}
  | a < rho > :: S :: RenRho {{ tex [[a]] \langle [[rho]]  \rangle }}
  | a { rho } :: S :: SubstRho {{ tex [[a]] [ [[rho]]  ] }}
  | a { b0 , b1 } :: S :: SubstTwo {{ tex [[a]] [ [[b0]] , [[b1]]  ] }}
  | ( A )   :: M :: Paren {{ coq ([[A]]) }}
  | (# a #) :: S :: SecretParen
    {{ tex [[a]] }}
    {{ com parsing precedence is hard }}
  | (@ a @) :: M :: TexParen
    {{ tex ([[a]]) }}
  | a ~ b : A :: :: Eq
    {{ com identity type }}
    {{ tex [[a]] \sim [[b]] \in {[[A]]} }}
  | refl      :: :: Refl
    {{ com reflexivity proof }}
  | Void      :: :: Void
    {{ com empty type }}
  | J t a b p         :: :: Transp
    {{ com J eliminator }}
  | Bool           :: :: Bool
    {{ com boolean type }}
  | true :: :: True
  | false :: :: False
  | if a b0 b1 :: :: If
    {{ tex \ottkw{if} \; [[a]]\; \ottkw{then}\; [[b0]]\; \ottkw{else}\; [[b1]] }}
  | G i :: S :: lookup
    {{ tex [[G]]([[i]]) }}
  | rho i :: S :: lookuprho
    {{ tex [[rho]]([[i]]) }}
  | A -> B :: M :: Arr
    {{ tex [[A]] \rightarrow [[B]] }}

context, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com contexts }}
					  {{ coq list ( atom * (grade * tm) ) }}
   | drop n G        ::    :: Drop {{ tex [[G]] \downarrow_{[[n]]} }}
   | empty           ::    :: Empty       {{ coq nil }}
%   | A               :: M   :: One
   | G ++ A          ::   :: Append      {{ tex [[G]], [[A]] }}
   | ( G )           :: M  :: Paren       {{ coq ([[G]]) }}
   | (# G #)           :: M  :: SecretParen {{ tex [[G]] }}

terminals :: 'terminals_' ::=
  | <->               ::   :: iso           {{ tex \leftrightarrow }}
  | <=>               ::   :: lrarrow       {{ tex \Leftrightarrow }}
  | -->               ::   :: step          {{ tex \longrightarrow }}
  | min               ::   :: min           {{ tex \mathsf{min} }}
  | ==                ::   :: definitional  {{ tex \equiv }}
  | all               ::   :: forall     {{ tex \forall }}
  | in                ::   :: in         {{ tex \in }}
  | let               ::   :: let        {{ tex \ottkw{let} }}
  | bind              ::   :: bind       {{ tex \ottkw{bind} }}
  | notin             ::   :: notin      {{ tex \not\in }}
  | <=                ::   :: check      {{ tex \leq }}
  | =>                ::   :: infer      {{ tex \Rightarrow }}
  | =>+               ::   :: minfer      {{ tex \Rightarrow^{\ast} }}
  | ->                ::   :: arrow      {{ tex \to }}
  | <-|               ::   :: mapsfrom   {{ tex \mapsfrom }}
  | []                ::   :: box        {{ tex \Box }}
  | |-                ::   :: entails    {{ tex \vdash }}
  | |-e               ::   :: entailsE   {{ tex \vdash }}
  | |-e               ::   :: entailsEE  {{ tex \vdash }}
  | |-$               ::   :: entailsC   {{ tex \vdash_{C} }}
  | -|                ::   :: produces   {{ tex \dashv }}
  | |=                ::   :: hs_entails {{ tex \vDash }}
  | |==               ::   :: hs_entaill {{ tex \vDash }}
  | /=                ::   :: neq        {{ tex \neq }}
  | |>                ::   :: cast       {{ tex \triangleright }}
  | ok                ::   :: ok         {{ tex \ \mathsf{ok} }}
  | _                 ::   :: blank      {{ tex \_ }}
  | ~>                ::   :: produce    {{ tex \leadsto }}
  | ~>*               ::   :: multistep  {{ tex \leadsto^{\ast} }}
  | ~>h               ::   :: steph      {{ tex \leadsto }}
  | empty             ::   :: empty      {{ tex \cdot }}
  | fv                ::   :: fv         {{ tex \mathsf{fv}\! }}
  | dom               ::   :: dom        {{ tex \mathsf{dom} }}
  | ~                 ::   :: twiddle    {{ tex \sim }}
  | ~~                ::   :: compatible {{ tex \asymp }}
  | '|'               ::   :: bar        {{ tex | }}
  | o                 ::   :: bullet     {{ tex \bullet }}
  | fst               ::   :: fst
  | snd               ::   :: snd
  | |=>|              ::   :: erasesto   {{ tex \mathrel{|\Rightarrow|} }}
  | |-=               ::   :: turneq     {{ tex \vdash_{=} }}
  | refl2             ::   :: refl2      {{ tex \mathbf{refl_2}  }}
  | ++                ::   :: concat     {{ tex \mathop{++} }}
  | *                 ::   :: times      {{ tex \cdot }}
  | Box               ::   :: Box        {{ tex \ottkw{Box} }}
  | =beta             ::   :: betaeq     {{ tex =_{\beta} }}
  | ;                 ::   :: semi       {{ tex \mathsf{;} }}
  | Pi                ::   :: Pi         {{ tex \Pi }}
  | inj               ::   :: inj        {{ tex \ottkw{inj} }}
  | case              ::   :: case       {{ tex \ottkw{case} }}
  | /\                ::   :: meet       {{ tex \wedge }}
  | \/                ::   :: join       {{ tex \vee }}
  | |->               ::   :: ctyp       {{ tex \Vdash }}
  | implies           ::   :: implies    {{ tex \ottkw{implies} }}
  | transp            ::   :: transp     {{ tex \ottkw{transp} }}

formula :: 'formula_' ::=
  | i < j                     ::   :: lt
  | judgement                 ::   :: judgement
  | ( a , S ) in R            ::   :: pmembership
    {{ tex ( [[a]] , [[S]] ) \in [[R]]  }}
  | a in S                    ::   :: tmembership
  | S1 in S2                    ::   :: fmembership
  | formula1 \/ formula2      ::   :: or
  | formula1 , formula2       ::   :: and
  | formula1 implies formula2 ::   :: implies
    {{ tex \text{if } [[formula1]]\text{, then } [[formula2]] }}
  | forall a , formula        ::   :: forallTm
    {{ tex \forall [[a]], [[formula]] }}
  | forall S , formula        ::   :: forallSet
    {{ tex \forall [[S]], [[formula]] }}
  | exists S , formula    ::   :: existsSet
    {{ tex \exists [[S]], [[formula]] }}
  | (# formula  #)            ::   :: HParen
    {{ tex [[formula]] }}
  | ( formula )            ::   :: Paren
  | S1 = S2                   ::   :: SetEq
  | ne a                      ::   :: Ne
  | nf a                      ::   :: Nf
  | wn a                      ::   :: Wn
  | wne a                     ::   :: Wne
  | a = b                     ::   :: TmEq
  | [ formula ]              ::   :: Regular
    {{ tex \colorbox{lightgray}{$[[formula]]$} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%Dependent Types

defns
   JPar :: '' ::=

defn
 a => b :: :: Par :: 'P_' {{ com Parallel Reduction }}
 {{ tex [[ a ]] \Rightarrow [[ b ]]  }}
by

----------- :: Var
var i => var i

---------------- :: Set
Set i => Set i

-------------- :: Void
Void => Void

A0 => A1
B0 => B1
----------------------- :: Pi
Pi A0 B0 => Pi A1 B1

A0 => A1
a0 => a1
----------------------- :: Abs
\ A0 a0 => \ A1 a1

a0 => a1
b0 => b1
----------------------- :: App
a0 b0 => a1 b1

a0 => a1
b0 => b1
----------------------- :: AppAbs
(\ A a0) b0 => a1 { b1 }

-------------- :: True
true => true

--------------- :: False
false => false

a0 => a1
b0 => b1
c0 => c1
--------------------------- :: If
if a0 b0 c0 => if a1 b1 c1

b0 => b1
--------------------------- :: IfTrue
if true b0 c0 => b1

c0 => c1
--------------------------- :: IfFalse
if false b0 c0 => c1

-------------- :: Bool
Bool => Bool

a0 => a1
b0 => b1
A0 => A1
----------------------------- :: Eq
a0 ~ b0 : A0 => a1 ~ b1 : A1

------------- :: Refl
refl => refl

t0 => t1
a0 => a1
b0 => b1
p0 => p1
------------------------------- :: J
J t0 a0 b0 p0 => J t1 a1 b1 p1

t0 => t1
-------------------- :: JRefl
J t0 a0 b0 refl => t1

a => a0
----------------------- :: AbsEta
(# \\ ( a < up 1 > var 0 ) #) => a0


defns
JPars :: '' ::=

defn
 a =>+ b :: :: Pars :: 'PS_' {{ com Parallel Reduction }}
 {{ tex [[ a ]] \Rightarrow^* [[ b ]]  }}
by

a => a
---------- :: Refl
a =>+ a

a => b
b =>+ c
------------------ :: Step
a =>+ c


defns
JJoin :: '' ::=

defn
a <=> b :: :: Coherent :: 'C_' {{ com Coherence }}
{{ tex [[a]] \Leftrightarrow [[b]] }}
by

a =>+ c
b =>+ c
----------------------- :: Intro
a <=> b

defns
JTyping :: '' ::=

defn
|- G ::     :: Ctx :: 'Ctx_' {{ com Context Well-Formedness }}
{{ tex \vdash [[G]] }}
by

------------- :: Empty
|- empty


|- G
G |- A : Set i
------------------------- :: Cons
|- G ++ A

defn
  G |- a : A ::  :: Typing :: 'T_' {{ com Typing }}
{{ tex [[G]] \vdash [[a]]: [[A]] }}
 by

|- G
i < j
-------------------------- :: Set
G |-  Set i : Set j

|- G
i < | G |
--------------------------------------------- :: Var
G |- var i : G i < up Suc i >

%% functions

[ G |- A : Set i ]
G ++ A |- B : Set i
--------------------------------------- :: Pi
G |- Pi A B : Set i

[ G |- Pi A B : Set i ]
G ++ A |- b : B
----------------------------------------------- :: Abs
G |- \ A b : Pi A B

G |- b : Pi A B
G |- a : A
------------------------------------------- :: App
G |- b a : B { a }

G |- a : A
G |- B : Set i
A <=> B
------------------------------- :: Conv
G |- a : B

|- G
G |- a : A
-------------------------------- :: Refl
G |- refl : a ~ a : A

G |- a : A
G |- b : A
G |- A : Set j
-------------------------------- :: Eq
G |- a ~ b : A : Set i

[ G |- a : A ]
[ G |- b : A ]
[ G |- A : Set j ]
G |- p : a ~ b : A
(# G ++ A #) ++ var 0 ~ (# a < up 1 > #)  : (# A < up 1 > #) |- C : Set i
G |- t : C { a ,  refl }
------------------------------------ :: J
G |- J t a b p : C { b , p }

|- G
-------------------------- :: Bool
G |- Bool : Set i

|- G
----------------------------- :: True
G |- true : Bool

|- G
----------------------------- :: False
G |- false : Bool

G ++ Bool |- A : Set i
G |- a : Bool
G |- b0 : A { true }
G |- b1 : A { false }
----------------------------- :: If
G |- if a b0 b1 : A { a }

|- G
----------------------------- :: Void
G |- Void : Set i


defns
JI :: '' ::=

defn
Interp I i A S ::  :: Interp :: 'I_' {{ com Interpretation relation }}
{{ tex [ [[A]] ]_[[i]]^[[I]] \searrow [[S]] }}
by

ne A
--------------------------- :: Ne
Interp I i A { a | wne a }

--------------------------- :: Void
Interp I i Void emptyset

--------------------------- :: VoidNew
Interp I i Void { a | wne a }

--------------------------- :: Bool
Interp I i Bool { a | a =>+ true \/ a =>+ false }

--------------------------- :: BoolNew
Interp I i Bool { a | a =>+ true \/ a =>+ false \/ wne a  }

--------------------------------------- :: Eq
Interp I i a ~ b : A { p | p =>+ refl , a <=> b }

--------------------------------------- :: EqNew
Interp I i a ~ b : A { p | ( p =>+ refl , a <=> b )  \/ wne p  }

Interp I i A S
F in S -> PowerSet STm
forall a, (# a in S implies Interp I i B { a } F a #)
-------------------------------- :: Pi
Interp I i Pi A B { b | forall a, (# a in S implies b a in F a #) }

Interp I i A S
R in S * PowerSet STm
forall a, (# exists S0  , ( a , S0 ) in R #)
forall a, forall S0, (# ( a , S0 ) in R implies Interp I i B { a } S0 #)
-------------------------------- :: PiCoq
Interp I i Pi A B { b | forall a, forall S0, (# ( a , S0 ) in R implies b a in S0 #) }

Interp I i A S
forall a, (# a in S implies (# exists S0 , Interp I i B {a} S0 #) #)
------------------------------------------- :: PiAlt
Interp I i Pi A B { b | forall a, (# a in S , forall S0, (# Interp I i B {a} S0,  b a in F a #) #) }

j < i
--------------------------------- :: Set
Interp I i Set j I j


A => B
Interp I i B S
--------------------------------- :: Red
Interp I i A S

defns
JII :: '' ::=

defn
InterpR i A S ::  :: InterpR :: 'IR_' {{ com Interpretation relation }}
{{ tex [ [[A]] ]_[[i]] \searrow [[S]] }}
by

--------------------------- :: Void
InterpR i Void emptyset

j < i
--------------------------------- :: Set
InterpR i Set j { A | exists S , InterpR j A S }


defns
JSTyping :: '' ::=

defn
  rho |= G :: :: SubstWff :: 'SSubst_' {{ com SubstWff }}
{{ tex [[rho]] \vDash [[G]] }}
by


defn
  G |= a : A ::  :: STyping :: 'ST_' {{ com Semantic Typing }}
{{ tex [[G]] \vDash [[a]]: [[A]] }}
by


defn
|= G ::     :: SCtx :: 'SCtx_' {{ com Semantic Context Well-Formedness }}
{{ tex \vDash [[G]] }}
by
